@page "/pagefileinsertdev"
@using System.IO
@using MongoDB.Bson
@inject SingletonServices singleton
@inject NavigationManager NavigationManager
@inject IWebHostEnvironment env
@inject IJSRuntime JS

<h3 class="text-center">File Developer</h3>


<p class="text-center fw-bold mb-5 mx-1 mx-md-4 mt-4">
    <table class="table table-bordered">
        <thead class="thead-dark">
            <tr>
                <th>Name</th>
                <th>Add file</th>
                <th>Download</th>
                <th>Send</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>

            @foreach (var info in StringNameClass.returnArrayDev(singleton.thisProject.TypeProject))
            {
                @if (singleton.thisProject.DocumentsDeveloper.Find(x => x.Name == info) != null
               && singleton.thisProject.DocumentsDeveloper.Find(x => x.Name == info).IsOk == true)
                {
                    <tr class="table-success">
                        <td>@info</td>
                        <td><InputFile OnChange="@OnInputFileChange" @onclick="() => OnClickInputFile(info)" /></td>

                        @if (singleton.thisProject.DocumentsDeveloper.Find(x => x.Name == info) != null
                       && singleton.thisProject.DocumentsDeveloper.Find(x => x.Name == info).Name == info)
                        {
                            <td><button type="button" class="btn btn-warning" @onclick="() => OnDowloadClick(info)">Download Files</button></td>
                        }
                        @if (files.Find(x => x.Name == info) != null && files.Find(x => x.Name == info).Name == info)
                        {
                            <td><button type="button" class="btn btn-success" @onclick="() => OnClickAddInBase(info)">Send file</button></td>
                        }
                        else
                        {
                            <td></td>
                        }
                        @if (singleton.thisProject.DocumentsDeveloper.Find(x => x.Name == info) != null
                       && singleton.thisProject.DocumentsDeveloper.Find(x => x.Name == info).Name == info
                       || files.Find(x => x.Name == info) != null && files.Find(x => x.Name == info).Name == info)
                        {
                            <td><button type="button" class="btn btn-warning" @onclick="() => OnDeleteClick(info)">Delete file</button></td>
                        }
                        else
                        {
                            <td></td>
                        }
                    </tr>
                }
                else
                {
                    <tr>
                        <td>@info</td>
                        <td><InputFile OnChange="@OnInputFileChange" @onclick="() => OnClickInputFile(info)" /></td>

                        @if (singleton.thisProject.DocumentsDeveloper.Find(x => x.Name == info) != null
                       && singleton.thisProject.DocumentsDeveloper.Find(x => x.Name == info).Name == info)
                        {
                            <td><button type="button" class="btn btn-warning" @onclick="() => OnDowloadClick(info)">Download Files</button></td>
                        }
                        @if (files.Find(x => x.Name == info) != null && files.Find(x => x.Name == info).Name == info)
                        {
                            <td><button type="button" class="btn btn-success" @onclick="() => OnClickAddInBase(info)">Send file</button></td>
                        }
                        else
                        {
                            <td></td>
                        }
                        @if (singleton.thisProject.DocumentsDeveloper.Find(x => x.Name == info) != null
                       && singleton.thisProject.DocumentsDeveloper.Find(x => x.Name == info).Name == info
                       || files.Find(x => x.Name == info) != null && files.Find(x => x.Name == info).Name == info)
                        {
                            <td><button type="button" class="btn btn-warning" @onclick="() => OnDeleteClick(info)">Delete file</button></td>
                        }
                        else
                        {
                            <td></td>
                        }
                    </tr>
                }
                
            }
        </tbody>
    </table>
</p>



@code {
    List<ListAddFiles> files = new();
    string nameRow = string.Empty;
    private string stringPath = string.Empty;
    private string fileName = string.Empty;

    protected override void OnInitialized()
    {
    }

    private void OnDeleteClick(string name)
    {
        var tempFileThis = files.Find(x => x.Name == name);
        if (tempFileThis != null) files.Remove(tempFileThis);
        var tempFileSingleton = singleton.thisProject.DocumentsDeveloper.Find(x => x.Name == name);
        if (tempFileSingleton != null)
        {
            singleton.thisProject.DocumentsDeveloper.Remove(tempFileSingleton);
            MongoExamples.ReplaceProjectById(singleton.thisProject._id, singleton.thisProject);
        }
    }

    private async Task OnDowloadClick(string rowName)
    {
        var temp = singleton.thisProject.DocumentsDeveloper.Find(x => x.Name == rowName);
        var stream = FileSystemService.DownloadToLocal(temp._idFile);

        using var streamRef = new DotNetStreamReference(stream: stream);

        await JS.InvokeVoidAsync("downloadFileFromStream", FileSystemService.NameDownloadFile(temp._idFile), streamRef);
    }

    private void OnClickInputFile(string rowName)
    {
        if (nameRow != rowName) nameRow = rowName;
    }

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles(1))
        {
            if (files.Find(x => x.Name == nameRow) == null) 
                files.Add(new ListAddFiles(nameRow, file));
        }
    }

    private async Task OnClickAddInBase(string rowName)
    {
        var file = files.Find(x => x.Name == rowName);

        Stream stream = file.File.OpenReadStream(100000000000);
        stringPath = $"{env.WebRootPath}\\Files\\{file.File.Name}";
        fileName = file.File.Name;
        FileStream fs = File.Create(stringPath);
        await stream.CopyToAsync(fs);
        stream.Close();
        fs.Close();

        await FileSystemService.UploadFileToDb(stringPath, fileName);
        files.Remove(file);
        singleton.thisProject.DocumentsDeveloper.Add(new DocumentDeveloper(FileSystemService.SearchByNameId(fileName), rowName));
        MongoExamples.ReplaceProjectById(singleton.thisProject._id, singleton.thisProject);
    }

}
