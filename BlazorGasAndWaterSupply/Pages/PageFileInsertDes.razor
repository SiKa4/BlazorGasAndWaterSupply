@page "/pagefileinsertdes"
@using MongoDB.Bson
@inject SingletonServices singleton
@inject NavigationManager NavigationManager
@inject IWebHostEnvironment env
@inject NavigationManager Navigation
@implements IAsyncDisposable
<h3 class="text-center">File Designer</h3>


<p class="text-center fw-bold mb-5 mx-1 mx-md-4 mt-4">
    <table class="table table-bordered">
        <thead class="alert-dark">
            <tr>
                <th>Name</th>
                <th>To change</th>
                <th>Info</th>
                <th>Save</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var info in StringNameClass.returnArrayDes(singleton.thisProject.TypeProject))
            {
                @if (singleton.thisProject.DocumentsDesigner.Find(x => x.Name == info) != null
               && singleton.thisProject.DocumentsDesigner.Find(x => x.Name == info).IsOk == true)
                {
                    <tr class="table-success">
                        <td>@info</td>
                        <td><button class="btn btn-success" @onclick="() => BtnOnChangeClick(info)">Change</button></td>

                        @if (onChangeRow == info)
                        {
                            <td><input @bind="@txtInfo" /></td>
                        }
                        else if (singleton.thisProject.DocumentsDesigner.Find(x => x.Name == info) != null
                        && singleton.thisProject.DocumentsDesigner.Find(x => x.Name == info).Name == info)
                        {
                            <td><input value="@singleton.thisProject.DocumentsDesigner.Find(x => x.Name == info).Text" disabled /></td>
                        }

                        @if (info == onChangeRow)
                        {
                            <td><button class="btn btn-success" @onclick="() => BtnSave(info)">Save</button></td>
                        }
                        else
                        {
                            <td></td>
                        }
                        @if (singleton.thisProject.DocumentsDesigner.Find(x => x.Name == info) != null
                       && singleton.thisProject.DocumentsDesigner.Find(x => x.Name == info).Name == info)
                        {
                            <td><button class="btn btn-warning" @onclick="() => BtnDelete(info)">Delete</button></td>
                        }
                    </tr>
                }
                else
                {
                    <tr>
                        <td>@info</td>
                        <td><button class="btn btn-success" @onclick="() => BtnOnChangeClick(info)">Change</button></td>

                        @if (onChangeRow == info)
                        {
                            <td><input @bind="@txtInfo" /></td>
                        }
                        else if (singleton.thisProject.DocumentsDesigner.Find(x => x.Name == info) != null
                        && singleton.thisProject.DocumentsDesigner.Find(x => x.Name == info).Name == info)
                        {
                            <td><input value="@singleton.thisProject.DocumentsDesigner.Find(x => x.Name == info).Text" disabled /></td>
                        }

                        @if (info == onChangeRow)
                        {
                            <td><button class="btn btn-success" @onclick="() => BtnSave(info)">Save</button></td>
                        }
                        else
                        {
                            <td></td>
                        }
                        @if (singleton.thisProject.DocumentsDesigner.Find(x => x.Name == info) != null
                       && singleton.thisProject.DocumentsDesigner.Find(x => x.Name == info).Name == info)
                        {
                            <td><button class="btn btn-warning" @onclick="() => BtnDelete(info)">Delete</button></td>
                        }
                    </tr>
                }
                
            }
        </tbody>
    </table>
</p>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

<hr>

<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>


@code {
    string txtInfo = string.Empty;
    string onChangeRow = string.Empty;

    private void BtnOnChangeClick(string nameRow)
    {
        onChangeRow = nameRow;
        var temp = singleton.thisProject.DocumentsDesigner.Find(x => x.Name == nameRow);
        if (temp == null) txtInfo = "";
        else txtInfo = temp.Text;
    }

    private void BtnSave(string nameRow)
    {
        var temp = singleton.thisProject.DocumentsDesigner.Find(x => x.Name == nameRow);
        if (temp != null)
        {
            singleton.thisProject.DocumentsDesigner.Remove(temp);
        }
        singleton.thisProject.DocumentsDesigner.Add(new DocumentDesigner(onChangeRow, txtInfo));
        MongoExamples.ReplaceProjectById(singleton.thisProject._id, singleton.thisProject);
        onChangeRow = string.Empty;
        txtInfo = string.Empty;
    }

    private void BtnDelete(string nameRow)
    {
        var temp = singleton.thisProject.DocumentsDesigner.Find(x => x.Name == nameRow);
        singleton.thisProject.DocumentsDesigner.Remove(temp);
        MongoExamples.ReplaceProjectById(singleton.thisProject._id, singleton.thisProject);
    }

    //--signalr

    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string, string, string>("ReceiveMessage", (user, message, _idReceiver, _idSending) =>
        {
            if (singleton.user._id.ToString() == _idSending && _idReceiver == singleton.thisProject._idCustomer.ToString()
                || singleton.thisProject._idCustomer.ToString() == _idSending && _idReceiver == singleton.user._id.ToString())
            {
                var encodedMsg = $"{MongoExamples.FindId(new ObjectId(_idSending)).Name}: {message}";
                messages.Add(encodedMsg);
                InvokeAsync(StateHasChanged);
            }
            
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", singleton.user.Name, messageInput, singleton.thisProject._idCustomer.ToString(), singleton.user._id.ToString());
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
